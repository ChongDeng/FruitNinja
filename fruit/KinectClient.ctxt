#BlueJ class context
comment0.params=
comment0.target=KinectClient()
comment0.text=\r\n\ Creates\ a\ KinectClient\ that\ attempts\ to\ connect\ to\ a\ server\ on\ the\ local\ machine,\r\n\ and\ that\ uses\ a\ full-size\ image\ from\ the\ Kinect\ feed\ (640\ by\ 480)\ and\ does\ not\r\n\ receive\ depth\ information.\r\n\ \r\n\ You\ can\ use\ the\ isConnected()\ method\ after\ construction\ to\ check\ that\ the\ client\r\n\ was\ able\ to\ connect\ to\ the\ server.\r\n
comment1.params=thumbnailWidth\ thumbnailHeight\ depth
comment1.target=KinectClient(int,\ int,\ boolean)
comment1.text=\r\n\ Creates\ a\ KinectClient\ that\ attempts\ to\ connect\ to\ a\ server\ on\ the\ local\ machine.\r\n\ \r\n\ The\ first\ two\ parameters\ determine\ the\ width\ and\ height\ of\ the\ thumbnail.\ \ This\ should\r\n\ be\ 640,\ 480\ for\ the\ full-size\ image,\ or\ some\ exact\ division\ if\ you\ only\ need\ a\ smaller\r\n\ image\ (this\ can\ help\ performance)\ like\ 320,\ 240\ or\ 80,\ 60.\r\n\r\n\ The\ third\ parameter\ specifies\ whether\ to\ make\ available\ depth\ information\r\n\ for\ each\ pixel.\ \ It\ is\ recommended\ that\ you\ pass\ false\ (as\ this\ will\ save\ resources)\r\n\ unless\ you\ know\ you\ want\ this.\r\n\ \r\n\ You\ can\ use\ the\ isConnected()\ method\ after\ construction\ to\ check\ that\ the\ client\r\n\ was\ able\ to\ connect\ to\ the\ server.\r\n
comment10.params=
comment10.target=void\ update()
comment10.text=\r\n\ Attempts\ to\ read\ the\ latest\ update\ from\ the\ server.\r\n\ \r\n\ Should\ only\ be\ called\ once\ per\ frame\ (typically\ in\ the\ world's\ act()\ method),\ as\ there\ is\ no\ point\ receiving\ two\ updates\ per\ frame.\r\n\ If\ we\ are\ not\ currently\ connected,\ the\ method\ does\ nothing.\r\n
comment11.params=
comment11.target=boolean\ isConnected()
comment11.text=\r\n\ Indicates\ whether\ the\ client\ is\ currently\ connected\ to\ the\ server.\r\n\ \r\n\ If\ it\ returns\ true,\ that\ isn't\ a\ guarantee\ that\ it\ it\ will\ remain\ connected\r\n\ (for\ example,\ the\ socket\ may\ have\ been\ dropped\ and\ we\ might\ not\ have\ noticed\ yet),\r\n\ but\ if\ it\ returns\ false,\ that\ is\ a\ guarantee\ that\ it\ is\ not\ connected.\r\n
comment12.params=
comment12.target=UserData[]\ getUsers()
comment12.text=\r\n\ Gets\ the\ user\ data\ for\ all\ users\ detected\ by\ the\ sensor\r\n\ (who\ may\ or\ may\ not\ have\ their\ skeletons\ currently\ tracked).\r\n\ \r\n\ Never\ returns\ null,\ but\ may\ return\ an\ empty\ array.\r\n
comment13.params=userId
comment13.target=UserData\ getUser(int)
comment13.text=\r\n\ Gets\ the\ user\ data\ for\ a\ particular\ user\ id.\r\n\ \r\n\ Returns\ null\ if\ there\ is\ no\ data\ for\ that\ user.\r\n
comment14.params=
comment14.target=greenfoot.GreenfootImage\ getThumbnail()
comment14.text=\r\n\ Gets\ a\ picture\ of\ what\ the\ sensor\r\n\ currently\ sees.\ \ This\ thumbnail\ is\ of\ a\ fixed\ size\ determined\ by\ the\ parameters\r\n\ passed\ to\ the\ KinectClient\ constructor\ (640\ *\ 480\ if\ not\ specified).\r\n\ \r\n\ This\ method\ may\ return\ null\ if\ the\ client\ is\ not\ connected\ or\ if\ update\r\n\ hasn't\ succesfully\ read\ a\ frame\ of\ data\ since\ it\ connected.\r\n
comment15.params=
comment15.target=greenfoot.GreenfootImage\ getCombinedUserImage()
comment15.text=\r\n\ Gets\ an\ image\ of\ all\ the\ users\ the\ sensor\ currently\ sees.\r\n\ \r\n\ This\ image\ is\ essentially\ the\ image\ from\ getThumbnail()\ (and\ will\ be\ the\ same\ size),\ but\ with\ all\ the\ pixels\r\n\ that\ are\ not\ currently\ occupied\ by\ users\ turned\ to\ transparent.\r\n\ \r\n\ This\ method\ may\ return\ null\ if\ the\ client\ is\ not\ connected\ or\ if\ update\r\n\ hasn't\ succesfully\ read\ a\ frame\ of\ data\ since\ it\ connected.\r\n
comment16.params=
comment16.target=short[]\ getRawDepth()
comment16.text=\r\n\ Gets\ the\ depth\ array\ (or\ null\ if\ not\ available).\r\n\ The\ contents\ will\ change\ every\ update,\ so\ you\ should\ take\ a\ copy\r\n\ if\ you\ want\ to\ use\ it\ across\ multiple\ frames,\ and\ you\ should\r\n\ not\ alter\ its\ contents.\ \ The\ numbers\ should\ be\ in\ the\ \r\n\ range\ 0\ to\ getMaxDepth()\ inclusive.\r\n
comment17.params=
comment17.target=short\ getMaxDepth()
comment17.text=\r\n\ Gets\ the\ maximum\ depth\ value\ (if\ depth\ is\ turned\ on,\ 0\ if\ there\ is\ a\ problem).\r\n\ You\ should\ be\ able\ to\ rely\ on\ this\ number\ being\ stable\r\n\ from\ after\ the\ first\ update\ onwards.\r\n
comment2.params=thumbnailWidth\ thumbnailHeight\ depth\ host
comment2.target=KinectClient(int,\ int,\ boolean,\ java.lang.String)
comment2.text=\r\n\ Creates\ a\ KinectClient\ that\ attempts\ to\ connect\ to\ the\ specified\ server\r\n\ ("127.0.0.1"\ by\ default).\r\n\ \r\n\ The\ first\ two\ parameters\ determine\ the\ width\ and\ height\ of\ the\ thumbnail.\ \ This\ should\r\n\ be\ 640,\ 480\ for\ the\ full-size\ image,\ or\ some\ exact\ division\ if\ you\ only\ need\ a\ smaller\r\n\ image\ (this\ can\ help\ performance)\ like\ 320,\ 240\ or\ 80,\ 60.\r\n\r\n\ The\ third\ parameter\ specifies\ whether\ to\ make\ available\ depth\ information\r\n\ for\ each\ pixel.\ \ It\ is\ recommended\ that\ you\ pass\ false\ (as\ this\ will\ save\ resources)\r\n\ unless\ you\ know\ you\ want\ this.\r\n\ \r\n\ You\ can\ use\ the\ isConnected()\ method\ after\ construction\ to\ check\ that\ the\ client\r\n\ was\ able\ to\ connect\ to\ the\ server.\r\n
comment3.params=
comment3.target=void\ connect()
comment4.params=
comment4.target=void\ disconnect()
comment4.text=\r\n\ Disconnects\ from\ the\ server.\r\n\ \r\n\ It\ is\ a\ good\ idea\ to\ call\ this\ if\ you\ know\ you\ won't\ be\ using\ this\ KinectClient\ again.\r\n
comment5.params=
comment5.target=void\ sendRequestForMore()
comment6.params=input
comment6.target=Point3D\ readPoint3D(java.nio.ByteBuffer)
comment7.params=total
comment7.target=java.nio.ByteBuffer\ fillBufferFromSocket(int)
comment8.params=buf\ total
comment8.target=java.nio.ByteBuffer\ fillBufferFromSocket(java.nio.ByteBuffer,\ int)
comment9.params=buf\ img\ x\ y\ amount
comment9.target=void\ bufferToImage(java.nio.IntBuffer,\ java.awt.image.BufferedImage,\ int,\ int,\ int)
numComments=18
