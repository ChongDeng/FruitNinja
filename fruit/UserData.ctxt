#BlueJ class context
comment0.params=ud\ scale
comment0.target=UserData(UserData,\ float)
comment1.params=id
comment1.target=UserData(int)
comment1.text=\r\n\ For\ internal\ use\ only.\r\n
comment10.params=
comment10.target=greenfoot.GreenfootImage\ getImage()
comment10.text=\r\n\ Gets\ the\ current\ user\ outline\ image.\ \ This\ will\ be\ a\ cutout\ of\ the\ user,\r\n\ which\ will\ be\ transparent\ wherever\ the\ user\ is\ not\ detected.\ \ So\ for\ example,\r\n\ if\ they\ stand\ with\ their\ legs\ apart,\ it\ will\ be\ transparent\ between\ their\ legs.\r\n\r\n\ The\ image\ will\ not\ (generally)\ be\ the\ same\ size\ as\ the\ world;\ it\ will\ only\r\n\ be\ large\ enough\ to\ contain\ the\ user's\ image.\ \ Use\ getImageX()\ and\ getImageY()\r\n\ to\ find\ out\ where\ the\ user's\ image\ resides\ in\ relation\ to\ the\ world\ as\ a\ whole.\r\n
comment11.params=
comment11.target=int\ getImageX()
comment11.text=\r\n\ The\ left\ of\ the\ image\ returned\ by\ getImage().\r\n
comment12.params=
comment12.target=int\ getImageY()
comment12.text=\r\n\ The\ top\ of\ the\ image\ returned\ by\ getImage().\r\n
comment13.params=index
comment13.target=Joint\ getJoint(int)
comment13.text=\r\n\ Gets\ the\ joint\ associated\ with\ a\ given\ index.\ \ This\ is\ identical\ to\ getAllJoints()[index].\ \ Valid\r\n\ values\ to\ pass\ in\ are\:\r\n\ \r\n\ Joint.HEAD\r\n\ Joint.NECK\r\n\ Joint.TORSO\r\n\ Joint.LEFT_SHOULDER\r\n\ Joint.LEFT_ELBOW\r\n\ Joint.LEFT_HAND\r\n\ Joint.RIGHT_SHOULDER\r\n\ Joint.RIGHT_ELBOW\r\n\ Joint.RIGHT_HAND\r\n\ Joint.LEFT_HIP\r\n\ Joint.LEFT_KNEE\r\n\ Joint.LEFT_FOOT\r\n\ Joint.RIGHT_HIP\r\n\ Joint.RIGHT_KNEE\r\n\ Joint.RIGHT_FOOT\r\n\ \r\n\ Joint\ data\ is\ only\ valid\ if\ isTracking()\ currently\ returns\ true.\r\n
comment14.params=
comment14.target=Joint[]\ getAllJoints()
comment14.text=\r\n\ Gets\ the\ position\ of\ all\ the\ joints\ for\ the\ user.\ \ The\ array\ will\ be\ of\ size\ Joint.NUM_JOINTS,\r\n\ and\ the\ different\ joints\ can\ be\ accessed\ using\ the\ following\ indexes\ from\ Joint\:\r\n\ \r\n\ Joint.HEAD\r\n\ Joint.NECK\r\n\ Joint.TORSO\r\n\ Joint.LEFT_SHOULDER\r\n\ Joint.LEFT_ELBOW\r\n\ Joint.LEFT_HAND\r\n\ Joint.RIGHT_SHOULDER\r\n\ Joint.RIGHT_ELBOW\r\n\ Joint.RIGHT_HAND\r\n\ Joint.LEFT_HIP\r\n\ Joint.LEFT_KNEE\r\n\ Joint.LEFT_FOOT\r\n\ Joint.RIGHT_HIP\r\n\ Joint.RIGHT_KNEE\r\n\ Joint.RIGHT_FOOT\r\n\ \r\n\ Joint\ data\ is\ only\ valid\ if\ isTracking()\ currently\ returns\ true.\r\n
comment15.params=
comment15.target=int\ getNearestJoint()
comment15.text=\r\n\ Gets\ the\ index\ of\ the\ joint\ that\ is\ nearest\ to\ the\ sensor.\ \ So\ for\ example,\ if\ the\ user\r\n\ holds\ their\ right\ hand\ out\ towards\ the\ sensor,\ this\ will\ return\ Joint.RIGHT_HAND.\r\n\ \r\n\ Note\ that\ if\ you\ spin\ your\ arm\ around\ in\ a\ circle,\ it\ is\ quite\ possible\ when\ your\ arm\r\n\ is\ across\ your\ body\ that\ your\ elbow\ is\ further\ forward\ than\ your\ hand,\ at\ which\ point\r\n\ Joint.RIGHT_ELBOW\ might\ be\ returned\ instead.\r\n\ \r\n\ This\ return\ value\ is\ only\ valid\ if\ isTracking()\ currently\ returns\ true.\r\n
comment16.params=
comment16.target=int\ getHighestJoint()
comment16.text=\r\n\ Gets\ the\ index\ of\ the\ joint\ that\ is\ vertically\ highest.\ \ For\ a\ normal\ standing\ position\r\n\ this\ will\ typically\ be\ Joint.HEAD,\ but\ if\ you\ raise\ your\ arm\ it\ would\ be\ Joint.LEFT_HAND\r\n\ or\ JOINT.RIGHT_HAND.\r\n\ \r\n\ This\ return\ value\ is\ only\ valid\ if\ isTracking()\ currently\ returns\ true.\r\n
comment17.params=img\ headRadius
comment17.target=void\ drawStickFigure(greenfoot.GreenfootImage,\ int)
comment17.text=\r\n\ Draws\ the\ user's\ joint\ data\ as\ a\ stick\ figure\ onto\ the\ given\ image.\ \ The\ image\r\n\ should\ be\ of\ the\ right\ size\ to\ contain\ the\ world.\ \ The\ second\ parameter\ is\r\n\ the\ radius\ to\ draw\ the\ head\ circle\ (this\ can't\ be\ inferred\ from\ the\ joints).\r\n\ 60\ is\ an\ okay\ value\ when\ using\ a\ 640*480\ world,\ you\ may\ want\ to\ adjust\ it\ to\ your\ preference.\r\n
comment18.params=img\ jA\ jB
comment18.target=void\ connect(greenfoot.GreenfootImage,\ int,\ int)
comment19.params=scale
comment19.target=UserData\ scaledCopy(float)
comment19.text=\r\n\ Makes\ a\ scaled\ copy\ of\ this\ UserData\ where\ the\ image\ and\ all\ the\r\n\ screen\ positions\ for\ joints\ are\ scaled\ by\ the\ given\ factor.\r\n\r\n\ If\ you\ pass\ 1.0f\ as\ the\ scale,\ it\ will\ return\ this,\ not\ a\ copy.\r\n
comment2.params=state
comment2.target=void\ setState(int)
comment2.text=\r\n\ For\ internal\ use\ only.\r\n
comment3.params=j\ joint
comment3.target=void\ setJoint(int,\ Joint)
comment3.text=\r\n\ For\ internal\ use\ only.\r\n
comment4.params=img\ x\ y
comment4.target=void\ setImage(greenfoot.GreenfootImage,\ int,\ int)
comment4.text=\r\n\ For\ internal\ use\ only.\r\n
comment5.params=
comment5.target=int\ getId()
comment5.text=\r\n\ Gets\ the\ identifer\ of\ this\ user.\ \ This\ is\ an\ arbitrary\ number.\ \ It\ is\ guaranteed\r\n\ to\ be\ unique\ among\ the\ current\ set\ of\ users,\ but\ if\ a\ user\ leaves\ the\ scene,\r\n\ or\ tracking\ fails,\ the\ identifier\ may\ be\ re-used\ again\ in\ future.\r\n
comment6.params=
comment6.target=boolean\ isTracking()
comment6.text=\r\n\ Returns\ true\ if\ the\ user\ is\ being\ tracked.\r\n\ \r\n\ Tracked\ means\ that\ they\ have\ been\ calibrated\ by\ the\ sensor,\ and\ we\ are\ now\ receiving\r\n\ updates\ on\ the\ positions\ of\ their\ joints.\r\n
comment7.params=
comment7.target=boolean\ isCalibrating()
comment7.text=\r\n\ Returns\ true\ if\ the\ user\ is\ currently\ calibrating.\r\n\ \r\n\ Calibrating\ means\ they\ have\ assumed\ the\ arms-up\ position,\ and\ the\ sensor\ is\ spending\ a\ few\r\n\ seconds\ trying\ to\ calibrate.\ \ If\ this\ is\ successful,\ they\ will\ move\ to\ the\ tracking\r\n\ state,\ after\ which\ this\ method\ will\ return\ false.\ \ If\ it\ is\ eventually\ unsuccessful\ they\ will\ return\r\n\ to\ the\ default\ state.\r\n
comment8.params=
comment8.target=boolean\ startedTracking()
comment8.text=\r\n\ Returns\ true\ if\ isTracking()\ currently\ returns\ true,\ but\ would\ have\ returned\ false\ before\ the\ last\r\n\ update\ from\ the\ server.\r\n\ \r\n\ This\ indicates\ that\ this\ frame\ is\ the\ first\ one\ in\ which\ they\ are\ being\ tracked,\ having\r\n\ been\ calibrating\ during\ the\ previous\ frame.\r\n
comment9.params=
comment9.target=boolean\ startedCalibrating()
comment9.text=\r\n\ Returns\ true\ if\ isCalibrating()\ currently\ returns\ true,\ but\ would\ have\ returned\ false\ before\ the\ last\r\n\ update\ from\ the\ server.\r\n\ \r\n\ This\ indicates\ that\ this\ frame\ is\ the\ first\ one\ in\ which\ they\ are\ being\ calibrated,\ having\r\n\ been\ in\ the\ default\ state\ during\ the\ previous\ frame.\r\n
numComments=20
