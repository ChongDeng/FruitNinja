#BlueJ class context
comment0.params=joint\ confidence\ positionWorld\ positionScreen
comment0.target=Joint(int,\ float,\ Point3D,\ Point3D)
comment0.text=\r\n\ For\ internal\ use\ only.\r\n
comment1.params=
comment1.target=int\ getJointIndex()
comment1.text=\r\n\ Gets\ the\ joint\ index\ for\ this\ joint\ (e.g.\ Joint.HEAD\ or\ JOINT.LEFT_HAND)\r\n
comment10.params=
comment10.target=java.util.Comparator\ compareX()
comment11.params=
comment11.target=java.util.Comparator\ compareY()
comment12.params=
comment12.target=java.util.Comparator\ compareZ()
comment13.params=scale
comment13.target=Joint\ scaledCopy(float)
comment13.text=\r\n\ Gets\ a\ scaled\ copy\ of\ the\ Joint\ where\ all\ the\ screen\ positions\ are\ scaled\ by\ the\ given\ factor.\r\n
comment2.params=
comment2.target=float\ getConfidence()
comment2.text=\r\n\ Gets\ the\ confidence\ value\ associated\ with\ a\ joint\ (a\ number\ between\ 0\ and\ 1,\ where\ 0\ is\ least\ confidence\ and\ 1\ is\ most\ confidence).\r\n\ \r\n\ The\ Kinect\ sensor\ indicates\ its\ confidence\ in\ a\ joint's\ position.\ \ If\ you\ move\ behind\ a\ table,\r\n\ the\ confidence\ on\ your\ now-obscured\ knees\ and\ feet\ will\ drop\ accordingly.\r\n\ \r\n\ Currently,\ all\ the\ methods\ (e.g.\ minJointBy)\ ignore\ this\ value,\ so\ if\ you\ want\ to\ use\ it\r\n\ you'll\ need\ to\ write\ the\ extra\ code\ yourself.\ \ It\ seems\ that\ it\ is\ also\ not\ supported\r\n\ properly\ by\ OpenNI\ at\ the\ moment.\r\n
comment3.params=
comment3.target=int\ getX()
comment3.text=\r\n\ Gets\ the\ X\ coordinate\ of\ this\ joint\ on\ the\ screen.\r\n
comment4.params=
comment4.target=int\ getY()
comment4.text=\r\n\ Gets\ the\ Y\ coordinate\ of\ this\ joint\ on\ the\ screen.\r\n
comment5.params=
comment5.target=Point3D\ getScreenPosition()
comment5.text=\r\n\ Gets\ the\ position\ of\ this\ joint\ on\ screen\ as\ a\ 3D\ point.\r\n\ \r\n\ The\ X\ and\ Y\ are\ as\ usual,\ and\ the\ Z\ is\ a\ depth\ coordinate\ which\ you\ can\ use\ to\ measure\r\n\ how\ close\ the\ joint\ is\ to\ the\ sensor\ (lower\ values\ are\ nearer\ the\ sensor).\r\n
comment6.params=
comment6.target=Point3D\ getPhysicalPosition()
comment6.text=\r\n\ Gets\ the\ physical\ position\ of\ the\ joint\ in\ the\ world\ as\ a\ 3D\ point.\r\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment8.params=joints\ cmp
comment8.target=int\ minJointBy(Joint[],\ java.util.Comparator)
comment8.text=\r\n\ Gets\ the\ minimum\ joint\ according\ to\ the\ given\ comparator.\ \ You\ can\r\n\ use\ this\ with\ the\ methods\ compareX(),\ compareY()\ and\ compareZ()\ to\ find\ the\ most\ extreme\r\n\ joints\ in\ a\ particular\ dimension.\r\n\ \r\n\ For\ example,\ minJointBy(userData.getAllJoints(),\ compareX())\ will\ get\ the\ leftmost\ joint\r\n\ (as\ it\ appears\ on\ screen\ -\ this\ will\ probably\ be\ your\ right\ hand\ when\ you\ face\ the\ sensor).\r\n\ minJointBy(userData.getAllJoints(),\ compareY())\ will\ get\ the\ highest\ joint\r\n\ (Y\ coordinates\ get\ larger\ as\ you\ go\ downwards,\ as\ on\ screen,\ but\ contrary\ to\ mathematical\ convention).\r\n\ minJointBy(userData.getAllJoints(),\ compareZ())\ will\ get\ the\ nearest\ joint\ to\ the\ sensor.\r\n\ \r\n\ The\ UserData.getNearestJoint()\ and\ UserData.getHighestJoint()\ are\ useful\ shorthands\ for\r\n\ using\ this\ method\ on\ Z\ and\ Y\ respectively.\r\n\ \r\n\ Note\ that\ this\ method\ completely\ ignores\ the\ confidence\ value\ associated\ with\ each\ joint.\r\n
comment9.params=joints\ cmp
comment9.target=int\ maxJointBy(Joint[],\ java.util.Comparator)
comment9.text=\r\n\ Gets\ the\ maximum\ joint\ according\ to\ the\ given\ comparator.\ \ You\ can\r\n\ use\ this\ with\ the\ methods\ compareX(),\ compareY()\ and\ compareZ()\ to\ find\ the\ most\ extreme\r\n\ joints\ in\ a\ particular\ dimension.\r\n\ \r\n\ For\ example,\ maxJointBy(userData.getAllJoints(),\ compareX())\ will\ get\ the\ rightmost\ joint\r\n\ (as\ it\ appears\ on\ screen\ -\ this\ will\ probably\ be\ your\ left\ hand\ when\ you\ face\ the\ sensor).\r\n\ maxJointBy(userData.getAllJoints(),\ compareY())\ will\ get\ the\ lowest\ joint\r\n\ (Y\ coordinates\ get\ larger\ as\ you\ go\ downwards,\ as\ on\ screen,\ but\ contrary\ to\ mathematical\ convention).\r\n\ maxJointBy(userData.getAllJoints(),\ compareZ())\ will\ get\ the\ furthers\ joint\ from\ the\ sensor.\r\n\ \r\n\ Note\ that\ this\ method\ completely\ ignores\ the\ confidence\ value\ associated\ with\ each\ joint.\r\n
numComments=14
